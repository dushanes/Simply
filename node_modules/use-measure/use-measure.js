"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useMeasure;

var _react = require("react");

var _resizeObserverPolyfill = _interopRequireDefault(require("resize-observer-polyfill"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) { return; } var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function useMeasure(ref) {
  var _useState = (0, _react.useState)( // DOMRectReadOnly.fromRect()
  {
    x: 0,
    y: 0,
    width: 0,
    height: 0,
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  }),
      _useState2 = _slicedToArray(_useState, 2),
      bounds = _useState2[0],
      setContentRect = _useState2[1];

  (0, _react.useLayoutEffect)(function () {
    if (ref.current === null) {
      return;
    }

    var animationFrameId = null;

    var measure = function measure(_ref) {
      var _ref2 = _slicedToArray(_ref, 1),
          entry = _ref2[0];

      animationFrameId = window.requestAnimationFrame(function () {
        setContentRect(entry.contentRect);
      });
    };

    var ro = new _resizeObserverPolyfill.default(measure);
    ro.observe(ref.current);
    return function () {
      window.cancelAnimationFrame(animationFrameId);
      ro.disconnect();
    };
  }, []);
  return bounds;
}